{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","helpers/helpers.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","username","findUserById","userId","usersFromServer","find","todosWithUser","App","useState","setTitle","selectedUserId","setSelectedUserId","isErrorOnUserSelect","setErrorOnUserSelect","isErrorOnTitleInput","setErrorOnTitleInput","setTodos","removeSpacesFromTittle","trim","onSubmit","event","preventDefault","selectedUser","prev","getNewId","Math","max","htmlFor","type","value","placeholder","onChange","currentTarget","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3128642b.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${email}`}\n    >\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport todosFromServer from '../api/todos';\nimport usersFromServer from '../api/users';\n\nexport function findUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport const todosWithUser: Todo[] = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: findUserById(todo.userId),\n  };\n});\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\nimport 'bulma/css/bulma.css';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport { todosWithUser, findUserById } from './helpers/helpers';\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isErrorOnUserSelect, setErrorOnUserSelect] = useState(false);\n  const [isErrorOnTitleInput, setErrorOnTitleInput] = useState(false);\n  const [todos, setTodos] = useState(todosWithUser);\n\n  const removeSpacesFromTittle = title.trim();\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (isErrorOnTitleInput) {\n      setErrorOnTitleInput(false);\n    }\n\n    setTitle(event.currentTarget.value);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (isErrorOnUserSelect) {\n      setErrorOnUserSelect(false);\n    }\n\n    setSelectedUserId(+event.currentTarget.value);\n  };\n\n  const handleSubmit = (event: React.MouseEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setErrorOnTitleInput(!removeSpacesFromTittle);\n    setErrorOnUserSelect(!selectedUserId);\n\n    if (removeSpacesFromTittle === '' || !selectedUserId) {\n      return;\n    }\n\n    const selectedUser = findUserById(selectedUserId);\n\n    setTodos(prev => {\n      const getNewId = Math.max(...prev.map(todo => todo.id));\n\n      return [\n        ...prev,\n        {\n          id: getNewId + 1,\n          title,\n          completed: false,\n          userId: selectedUser ? selectedUser.id : null,\n          user: selectedUser,\n        },\n      ];\n    });\n\n    setTitle('');\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"box has-text-centered\">\n        <h1 className=\"title is-1\">Add todo form</h1>\n\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <div className=\"field\">\n            <label\n              htmlFor=\"title\"\n              className=\"label\"\n            >\n              Write down your task:\n            </label>\n\n            <input\n              data-cy=\"titleInput\"\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={title}\n              className=\"input\"\n              placeholder=\"Enter a title\"\n              onChange={handleTitleChange}\n            />\n\n            {isErrorOnTitleInput && (\n              <span className=\"error\">\n                <br />\n                Please enter a title\n              </span>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label\n              htmlFor=\"userSelect\"\n              className=\"label\"\n            >\n              Choose user:\n            </label>\n            <span className=\"select\">\n              <select\n                data-cy=\"userSelect\"\n                id=\"userSelect\"\n                name=\"userSelect\"\n                value={selectedUserId}\n                className=\"select\"\n                onChange={handleUserChange}\n              >\n                <option value={0} disabled>Choose a user</option>\n                {usersFromServer.map(user => (\n                  <option key={user.id} value={user.id}>{user.name}</option>\n                ))}\n              </select>\n            </span>\n            {isErrorOnUserSelect && (\n              <span className=\"error\">\n                <br />\n                Please choose a user\n              </span>\n            )}\n          </div>\n\n          <button\n            type=\"submit\"\n            data-cy=\"submitButton\"\n            className=\"button is-primary\"\n          >\n            Add\n          </button>\n        </form>\n\n        <TodoList todos={todos} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}